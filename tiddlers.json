[{"text":"https://codelabs.developers.google.com/codelabs/cloud-kotlin-jib-cloud-run\n\n```sh\n# instal pkgs\nys docker maven aur/google-cloud-sdk\nsudo usermod -a -G docker ${USER}\\n\n\ngcloud auth list\ngcloud auth login\n\ngcloud config set account michal.krissak@vacuumlabs.com\ngcloud config list project\ngcloud config set project pelagic-cycle-315611\n\ngcloud auth configure-docker\n\n./mvnw -DskipTests spring-boot:run\n\n# ADD WebController (see below)\n\ngcloud services enable cloudbuild.googleapis.com run.googleapis.com\n\nexport GOOGLE_CLOUD_PROJECT=$(gcloud config get-value project)\n./mvnw com.google.cloud.tools:jib-maven-plugin:1.8.0:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/kotlin-jib-cloud-run\n\ngcloud container images list\n\n# then go to Cloud Run and add new Service, choose your image to be used\n```\n\n\n''~WebController''\n\n```py\n# FILE: src/main/kotlin/com/example/demo/Controller.kt\n\npackage com.example.demo\n\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass Controller {\n  \n  @GetMapping(\"/\")\n  fun saySomething(): String {\n    return \"Kotlin app on Cloud Run, containerized by Jib!\"\n  }\n}","tmap.id":"4a2356b7-152a-4355-8c70-8347c3e16e12","title":"Cloud Run Kotlin Jib","tags":"GCP","modified":"20210603085819179","created":"20210603075846078"},{"text":"https://codelabs.developers.google.com/codelabs/cloud-run-hello-python3\n\n''general setup''\n\n```\ngcloud auth list\ngcloud config list project\ngcloud config set project <PROJECT_ID>\ngcloud services enable cloudbuild.googleapis.com run.googleapis.com\n\nmkdir python-flask-cloud-run\ncd python-flask-cloud-run\n```\n\n''app.py''\n\n```py\n# file app.py\n\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/\", methods=[\"GET\"])\ndef hello():\n    \"\"\" Return a friendly HTTP greeting. \"\"\"\n    who = request.args.get(\"who\", \"World\")\n    return f\"Hello {who}!\\n\"\n\n\nif __name__ == \"__main__\":\n    # Used when running locally only. When deploying to Cloud Run,\n    # a webserver process such as Gunicorn will serve the app.\n    app.run(host=\"localhost\", port=8080, debug=True)\n```\n\n''Dockerfile''\n\n```py\n# Use an official lightweight Python image.\n# https://hub.docker.com/_/python\nFROM python:3.9-slim\n\n# Install production dependencies.\nRUN pip install Flask gunicorn\n\n# Copy local code to the container image.\nWORKDIR /app\nCOPY . .\n\n# Service must listen to $PORT environment variable.\n# This default value facilitates local development.\nENV PORT 8080\n\n# Run the web service on container startup. Here we use the gunicorn\n# webserver, with one worker process and 8 threads.\n# For environments with multiple CPU cores, increase the number of workers\n# to be equal to the cores available.\nCMD exec gunicorn --bind 0.0.0.0:$PORT --workers 1 --threads 8 --timeout 0 app:app\n```\n\n''build DI and deploy''\n\n```sh\ngcloud config get-value project\nPROJECT_ID=$(gcloud config get-value project)\nDOCKER_IMG=\"gcr.io/$PROJECT_ID/helloworld-python\"\n\necho $PROJECT_ID\necho $DOCKER_IMG\n\ngcloud builds submit --tag $DOCKER_IMG\ngcloud container images list\n\n# sudo systemctl enable --now docker\ndocker pull $DOCKER_IMG\ndocker images\ndocker run -p 8080:8080 $DOCKER_IMG\n\nREGION=\"europe-west1\"\ngcloud run deploy helloworld-python --image $DOCKER_IMG --platform managed --region $REGION --allow-unauthenticated\n\ngcloud run services describe helloworld-python --platform managed --region $REGION --format \"value(status.url)\"\n\ncurl 'https://helloworld-python-pjpukiw74q-ew.a.run.app?who=me'\n```\n\n''cleanup''\n\n```sh\ngcloud container images list\ngcloud container images delete gcr.io/pelagic-cycle-315611/helloworld-python\ngcloud run services delete helloworld-python --platform managed --region $REGION\n```\n","tmap.id":"b2bd2895-a286-41b8-ae46-13f330445003","title":"Cloud Run Python Flask","tags":"GCP","modified":"20210603091546350","created":"20210603085820637"},{"text":"https://codelabs.developers.google.com/codelabs/cloud-springboot-kubernetes/index.html\n\n```sh\ngit clone https://github.com/spring-guides/gs-spring-boot.git\ncd gs-spring-boot/complete\n./mvnw -DskipTests spring-boot:run\n\n./mvnw -DskipTests package\ngcloud services enable containerregistry.googleapis.com\ngcloud config list --format=\"value(core.project)\"\nexport GOOGLE_CLOUD_PROJECT=$(gcloud config get-value project)\n./mvnw -DskipTests com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v1\ngcloud container images list\n\ndocker run -ti --rm -p 8080:8080  gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v1\ndocker images\n```\n\n''create k8s cluster''\n\n```sh\ngcloud services enable compute.googleapis.com container.googleapis.com\ngcloud container clusters create hello-java-cluster --num-nodes 2 --machine-type n1-standard-1 --zone us-central1-c\n\nexport KUBECONFIG=~/.kube/config\nmkdir ~/.kube\ngcloud container clusters get-credentials hello-java-cluster --zone us-central1-c --project pelagic-cycle-315611\nkubectl get nodes\nkubectl create deployment hello-java --image=gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v1\nkubectl get po\nkubectl get deploy\n\nkubectl get svc\nkubectl create service loadbalancer hello-java --tcp=8080:8080\nkubectl get svc\n\nkubectl scale deployment hello-java --replicas=3\nkubectl get deploy\nkubectl get po\n```\n\n''update app''\n\n```sh\n# change return value string\nvim src/main/java/com/example/springboot/HelloController.java\n\n./mvnw -DskipTests package com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v2\ngcloud container images list\nkubectl set image deployment/hello-java hello-java=gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v2\nkubectl get po\n\n# rollback\nkubectl rollout undo deployment/hello-java\nkubectl get po\n```\n\n''cleanup''\n\n```sh\ngcloud container clusters list\ngcloud container images list\ngcloud container clusters delete hello-java-cluster --zone us-central1-c\ngcloud container images delete gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v1 gcr.io/$GOOGLE_CLOUD_PROJECT/hello-java:v2\ngcloud container clusters list\ngcloud container images list\n```","tmap.id":"9e99d4b3-ee85-4503-a9b2-d0b8954a5f95","title":"Kubernetes Engine Java Deploy","tags":"GCP","modified":"20210603124844058","created":"20210603121900244"}]